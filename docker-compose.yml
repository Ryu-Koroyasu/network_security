# docker-compose.yml
# Network Security System - Suricata IDS + Host-based Fail2ban
# Fail2banはホストOSで動作するため、このcompose設定には含まれません
services:
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: nginx_proxy
    # Nginxのアクセスログ - ホスト側Fail2banが監視
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro  # SSL証明書をマウント
      - nginx_logs:/var/log/nginx # Nginxのログを名前付きボリュームに保存
    ports:
      - "80:80"     # HTTPからHTTPSへのリダイレクト用
      - "8080:8080" # HTTP（レガシー対応）
      - "443:443"   # HTTPS
    networks:
      - internal_network
      - external_network # 外部からのアクセスを受けるネットワーク
    depends_on:
      - flask_app

  flask_app:
    build:
      context: ./flask_app
      dockerfile: Dockerfile
    container_name: flask_app
    ports:
      - "5000:8080"
    networks:
      - internal_network

  suricata:
    build:
      context: ./suricata
      dockerfile: Dockerfile # Suricata用のDockerfile
    container_name: suricata_ids
    # SuricataのIPSモード（ホストネットワークモード）
    volumes:
      - suricata_logs:/var/log/suricata
      - nginx_logs:/var/log/nginx:ro  # Nginxログへの読み取り専用アクセス
    network_mode: host  # ホストネットワークモードでホストのトラフィックを監視
    cap_add:
      - NET_ADMIN # ネットワークインターフェース監視に必要
      - NET_RAW   # RAWソケットの使用に必要
      - SYS_NICE  # スケジューリング優先度設定に必要
    privileged: true    # ホストネットワークアクセスに必要
    restart: unless-stopped

# 永続化のためのボリューム定義
volumes:
  nginx_logs: # Nginxログ用（ホスト側Fail2banが監視）
  suricata_logs: # Suricataログ用（ホスト側Fail2banが監視）

# ネットワーク定義
networks:
  internal_network: # コンテナ間通信用
    driver: bridge
  external_network: # 外部公開用
    driver: bridge