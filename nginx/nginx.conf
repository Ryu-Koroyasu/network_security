# nginx/nginx.conf
events {
    worker_connections 16;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  65;

    # ここで log_format を定義
    log_format suricata_access '$remote_addr - $remote_user [$time_local] "$request" '
                               '$status $body_bytes_sent "$http_referer" '
                               '"$http_user_agent" "$http_x_forwarded_for" "$request_time"';

    # ここを適切なバックエンドサーバに書き換える
    upstream backend_app {
        # 例: Docker内部の別のコンテナ名や、ホスト上のIPアドレスとポート
        server flask_app:5000;
        # server host.docker.internal:8080; # ホスト上のサービスに接続する場合
    }

    # HTTPからHTTPSへのリダイレクト
    server {
        listen 80;
        server_name localhost;
        return 301 https://$server_name$request_uri;
    }

    # HTTP用（レガシー対応）
    server {
        listen 8080;
        server_name localhost;

        # 通常のリクエスト処理とWAF機能
        location / {
            # SQLインジェクション攻撃検出
            if ($request_uri ~* "(union.*select|select.*from|insert.*into|delete.*from|drop.*table|1'.*or.*1=1|admin'--|'.*or.*'a'='a)") {
                access_log /var/log/nginx/blocked_sql.log suricata_access;
                return 403 "SQL Injection Blocked";
            }
            
            # XSS攻撃検出
            if ($request_uri ~* "(<script|javascript:|onload=|onerror=|alert\(|eval\()") {
                access_log /var/log/nginx/blocked_xss.log suricata_access;
                return 403 "XSS Blocked";
            }
            
            # パストラバーサル攻撃検出
            if ($request_uri ~* "(\.\./)") {
                access_log /var/log/nginx/blocked_traversal.log suricata_access;
                return 403 "Path Traversal Blocked";
            }
            
            # 悪意のあるUser-Agent検出
            if ($http_user_agent ~* "(sqlmap|nikto|w3af|nmap|masscan|dirb|dirbuster|gobuster)") {
                access_log /var/log/nginx/blocked_ua.log suricata_access;
                return 403 "Malicious User-Agent Blocked";
            }
            
            proxy_pass http://backend_app;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;
        }

        access_log /var/log/nginx/access.log suricata_access;
        error_log /var/log/nginx/error.log warn;
    }

    # HTTPS設定
    server {
        listen 443 ssl http2;
        server_name localhost;

        # SSL証明書設定
        ssl_certificate /etc/nginx/ssl/server.crt;
        ssl_certificate_key /etc/nginx/ssl/server.key;

        # SSL設定の強化
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 5m;

        # セキュリティヘッダー
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        location / {
            proxy_pass http://backend_app;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-Port 443;
            proxy_redirect off;
        }

        access_log /var/log/nginx/access.log suricata_access;
        error_log /var/log/nginx/error.log warn;
    }
}